[{"content":"","date":"21 December 2024","externalUrl":null,"permalink":"/tags/classmethod/","section":"Tags","summary":"","title":"Classmethod","type":"tags"},{"content":"","date":"21 December 2024","externalUrl":null,"permalink":"/tags/classproperty/","section":"Tags","summary":"","title":"Classproperty","type":"tags"},{"content":"","date":"21 December 2024","externalUrl":null,"permalink":"/tags/decorators/","section":"Tags","summary":"","title":"Decorators","type":"tags"},{"content":"","date":"21 December 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"21 December 2024","externalUrl":null,"permalink":"/tags/property/","section":"Tags","summary":"","title":"Property","type":"tags"},{"content":"","date":"21 December 2024","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"I have occasionally desired the ergonomics of a classmethod/property. This works in Python ~3.9+, but is marked as deprecated and scheduled for removal in 3.13.\nclass OPTIONS: lol = \u0026#39;lol\u0026#39; @classmethod @property def lmao(self): return self.lol + \u0026#39;, lmao\u0026#39; Apparently this only works accidentally, and there are Good and Proper Reasons\u0026#x2122;\u0026#xfe0f; for removing the ability to combine these two decorators, but if want to use a classproperty, damnit, I want a classproperty!\nEnter classproperty:\nclass classproperty: def __init__(self, func): self.fget = func def __get__(self, instance, owner): return self.fget(owner) class OPTIONS: lol = \u0026#39;lol\u0026#39; @classproperty def lmao(self): return self.lol + \u0026#39;, lmao\u0026#39; print(OPTIONS.lol) # \u0026gt;\u0026gt;\u0026gt; lol print(OPTIONS.lmao) # \u0026gt;\u0026gt;\u0026gt; lol, lmao Easy.\n","date":"21 December 2024","externalUrl":null,"permalink":"/posts/python_classproperty/","section":"Posts","summary":"I have occasionally desired the ergonomics of a classmethod/property.","title":"Python_classproperty","type":"posts"},{"content":"","date":"21 December 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"3 December 2024","externalUrl":null,"permalink":"/tags/nicegui/","section":"Tags","summary":"","title":"Nicegui","type":"tags"},{"content":"Social media and chat apps typically support thumbnail style page previews when you share a link. These previews are usually use Open Graph protocol, a format published by Facebook but adopted nearly everywhere.\nOpen Graph documentation: https://ogp.me\nLess technical overview: https://ahrefs.com/blog/open-graph-meta-tags/\nA word of warning! Many social media sites will fetch the metadata with a web crawler running on their servers, and cache the result! This means that you can\u0026rsquo;t debug your OGP previews inside Discord or Facebook chat, because it\u0026rsquo;ll keep showing you the first preview that it loaded.\nI recommend using a tool like https://socialsharepreview.com to check your tags, so you don\u0026rsquo;t get tricked by secret caching.\nOGP in NiceGUI # Supporting these page previews in NiceGUI is relatively easy, we just need to add the relevant HTML meta tags to the page head:\nfrom nicegui import ui # call this at the top level to set the tags for your entire app ui.add_head_html( \u0026#34;\u0026#34;\u0026#34; \u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;Lol Lmao\u0026#34; /\u0026gt; \u0026lt;meta property=\u0026#34;og:description\u0026#34; content=\u0026#34;lol, lmao\u0026#34; /\u0026gt; \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;/static/lol_lmao.jpg\u0026#34; /\u0026gt; \u0026#34;\u0026#34;\u0026#34;, shared=True, # shared adds this HTML to the base page template ) @ui.page(\u0026#39;/somewhere\u0026#39;) def somewhere(): # call this inside a page to set the tags for only that page # if you want page-specific previews, then do not set the global tags because # if multiple of one type exist, the first one will typically be used ui.add_head_html( \u0026#34;\u0026#34;\u0026#34; \u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;Somewhere\u0026#34; /\u0026gt; \u0026lt;meta property=\u0026#34;og:description\u0026#34; content=\u0026#34;somewhere\u0026#34; /\u0026gt; \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;/static/somewhere/preview.jpg\u0026#34; /\u0026gt; \u0026#34;\u0026#34;\u0026#34; ) ui.run() ","date":"3 December 2024","externalUrl":null,"permalink":"/posts/nicegui-social-previews/","section":"Posts","summary":"Social media and chat apps typically support thumbnail style page previews when you share a link.","title":"Nicegui Social Previews","type":"posts"},{"content":"","date":"5 October 2024","externalUrl":null,"permalink":"/tags/code-organization/","section":"Tags","summary":"","title":"Code Organization","type":"tags"},{"content":"","date":"5 October 2024","externalUrl":null,"permalink":"/tags/dialog-boxes/","section":"Tags","summary":"","title":"Dialog Boxes","type":"tags"},{"content":"This post is inspired by a reddit thread I responded to a while back.\nHere\u0026rsquo;s a more generic version of the answer I gave:\nclass ConfirmationPopup(ui.dialog): def __init__(self): super().__init__() with self, ui.card(): ui.label(\u0026#39;Are you sure you want to do that?\u0026#39;) with ui.row(): ui.button(\u0026#39;Yes\u0026#39;, on_click=lambda: self.submit(True)) ui.button(\u0026#39;No\u0026#39;, on_click=lambda: self.submit(False)) async def click(): result = await ConfirmationPopup() if result == True: ui.notify(\u0026#39;User clicked Yes!\u0026#39;) if result == False: ui.notify(\u0026#39;User clicked No!\u0026#39;) if result is None: ui.notify(\u0026#39;User clicked outside the dialog!\u0026#39;) ui.button(\u0026#34;Click\u0026#34;, on_click=click) ui.run() What\u0026rsquo;s interesting here is that you can await a dialog box, and the yielded value is the \u0026ldquo;conclusion\u0026rdquo; of the dialog interaction.\nThis behavior is caused by ui.dialog.__await__ (source code), and reproduced here:\ndef __await__(self): self._result = None self.submitted.clear() self.open() yield from self.submitted.wait().__await__() # pylint: disable=no-member result = self._result self.close() return result This method allows you await an instance of ui.dialog, which will open the dialog, wait and collect anything sent into self.submit() from inside the dialog class, and then return that value to the calling code.\nawaiting the dialog does require writing an async function, but luckily all nicegui objects that accept callbacks are perfectly happy to accept an async callback, which helps contain the infectious spread of function colors, if that\u0026rsquo;s something you have opinions about.\nHopefully these examples help you organize your NiceGUI code!\n","date":"5 October 2024","externalUrl":null,"permalink":"/posts/nicegui_dialogs/","section":"Posts","summary":"This post is inspired by a reddit thread I responded to a while back.","title":"NiceGUI Tips: Elegant Dialog Lifecycles","type":"posts"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/c/","section":"Tags","summary":"","title":"C","type":"tags"},{"content":"This article is part 1 in a series exploring code generation systems.\nCase Study: Firmware Configuration Case Study: Message Decoding (coming soon) Configuration management in embedded systems is a difficult problem. The projects are often resource contrained, and the languages and tools are\u0026hellip; not usually modern. It\u0026rsquo;s rather common to have a series of products built on a common platform (same microcontroller(MCU), shared libraries), but different hardware configurations. Sharing code between projects is a valuable time/effort saver, but it\u0026rsquo;s non-trivial to correctly abstract away model-specific details like the exact layout of the MCU\u0026rsquo;s pins.\nThe status quo # Here are some snippets from a real project. This is the section of code that defines human readable names for specific pins:\n// hardware.h // Pin Definitions - latX for outputs, portX for inputs // Front Panel bitbang SPI #define CLOCK_PIN LATAbits.LATA6 // #define DATA_PIN LATAbits.LATA7 // #define STROBE_PIN LATAbits.LATA3 // // Front Panel LEDs #define ANT_LED LATAbits.LATA5 // #define BYPASS_LED LATAbits.LATA4 // #define BITBANG_PORT LATEbits.LATE2 // #define FREQ_PIN PORTEbits.RE3 // #define RADIO_OUT_PIN LATAbits.LATA2 // #define RELAY_BUS_PIN LATEbits.LATE0 // #define ANTENNA_RELAY LATEbits.LATE1 // // ADC Channel Select macros #define ADC_FWD_PIN 0 #define ADC_REV_PIN 1 This is the matching initializing code, which sets up all the GPIOs in the correct modes: analog vs digital, input vs output. Notice that the pin names defined in the header can barely help us, because we need to access different registers for initialization than for reading/writing.\n// hardware.c void ports_init(void) { // Pin Analog select: 1 = analog, 0 = digital ANSELA = 0b00000011; ANSELB = 0b00000000; ANSELC = 0b00000000; ANSELD = 0b00000000; ANSELE = 0b00000000; // Pin Direction select: 1 = input, 0 = output TRISA = 0b00000011; // RA0 and RA1 inputs for FWD/REV TRISB = 0b11111111; TRISC = 0b11111111; TRISD = 0b00000000; TRISE = 0b00000000; // Radio CMD and RelayBus are outs } void startup(void) { ports_init(); // INITIALIZATIONS STROBE_PIN = 0; CLOCK_PIN = 0; RADIO_OUT_PIN = 0; } All in all, this isn\u0026rsquo;t unreasonable. A lot of firmware like this exists. Handling one or two projects like this is perfectly manageable.\nBut what about five?\nTen? Twenty?\nStory Time: Scaling with the status quo # Imagine it\u0026rsquo;s new product time: You get a schematic for the new board from the hardware team. You look it over and it\u0026rsquo;s reasonably similar to one of the projects you\u0026rsquo;ve already been working on. You do the obvious thing: fork the most similar project and start modifying it. Plug the new MCU pinout into hardware.h as pin definitions. Modify the port_init() function in hardware.c.\nThe code compiles. When the dev unit arrives, you upload your hex and the LEDs come on and the serial port chatters happily. Maybe there was some swearing, but overall you\u0026rsquo;re satisfied, so you commit all your progress and start pulling datasheets for the other chips you\u0026rsquo;re going to need to talk to.\nFast forward 3 weeks: it\u0026rsquo;s time to sketch out the ADC driver for the new sensor module. Everything starts out okay, but quickly you notice that you\u0026rsquo;re not getting the range of values you expect. You spend the afternoon tracing out the sensor circuit with your oscilloscope, but you can\u0026rsquo;t find the cause. At five o\u0026rsquo;clock you put away your probes and head home, frustrated that you haven\u0026rsquo;t found the issue yet.\nThe next day you turn on your computer, open your editor, and your eyes catch on a line of code:\nANSELA = 0b00000011; Wait, A0 and A1? This product moved one of the analog inputs to A2! Okay, easy fix:\nANSELA = 0b00000110; A stupid typo. Annoyed, you recompile and upload the hex. Amazingly, the ADC works better when it\u0026rsquo;s actually enabled in the GPIO registers.\nI mean, it\u0026rsquo;s one typo, Michael. What could it cost? # This is a true story. It\u0026rsquo;s happened to me more times than I want to admit, and it\u0026rsquo;s probably happened to you. In my experience, there are two reasons why this simple typo hits so hard:\n(Lack of a) Single Source of Truth # In the original configuration example, changing something about a pin requires making changes in multiple places in multiple files. The changes also aren\u0026rsquo;t all in a standardized format. Deciding to change a pin from a digital output to an analog input could easily require 5, 6, 7 edits. It\u0026rsquo;s very difficult to make the wrong code look wrong with this kind of setup.\nTemporal Distance # Unless you can test every subsystem in your processor in a single day, there\u0026rsquo;s going to be some delay between when you do the inital setup and when you can start writing code that targets a given peripheral. This creates a gap between when the error happens and when it\u0026rsquo;s possible to detect it. All the deep context from when you first wrote the setup code is gone, and your debugging efforts have to start from a blank page. In this situation, even simple typos can punch WAY above their weight.\nThere Must be a Better Way! # An ideal solution fixes the above problems, plus a few more:\nsingle source of truth solve the temporal distance issue by making wrong configurations a compiler error write as much of the configuration in one shot as possible support multiple compilation profiles (dev/release) good ergonomics powerful, flexible, and extensible If we were writing C++, we could use templates and constexpr. Unfortunately, this project is restricted to C. The C preprocessor is deeply abusable, but even it\u0026rsquo;s dark powers are limited.\nWhat I eventually settled on was Python scripts as part of my toolchain, using a tool from Ned Batchelder called Cog. Cog allows you to write Python directly in other source code, inside block comments. When you run cog on the combined source, it evaluates the contents of the cog block and inserts the output into the specified region.\n/*[[[cog import cog # Cog actually imports this automatically! cog.outl(\u0026#34;Hello world!\u0026#34;) # cog.outl() inserts its output after the block ]]]*/ Hello world! //[[[end]]] /*[[[cog fnames = [\u0026#39;DoSomething\u0026#39;, \u0026#39;DoAnotherThing\u0026#39;, \u0026#39;DoLastThing\u0026#39;] for fn in fnames: cog.outl(\u0026#34;void %s();\u0026#34; % fn) ]]]*/ void DoSomething(); void DoAnotherThing(); void DoLastThing(); //[[[end]]] Cog doesn\u0026rsquo;t modify the file if the output hasn\u0026rsquo;t changed, so it\u0026rsquo;s make friendly. The generated code can be mixed with handwritten code, and is checked directly into version control, so it\u0026rsquo;s explorable and discoverable, and your IDE/tools can navigate it directly.\nPin Definition Format # The following file is the custom format for pin definitions. It\u0026rsquo;s designed to minimize write/edit friction and maximize reviewability. The intended usage is to reference the schematic, and match each pin on the schematic with its definition in the configuration. Any data entry errors should be trivially discoverable by stepping through the config line-by-line.\nA pin is defined by 3 elements, a PIN_ID, a PIN_NAME, and a list of tags. The PIN_ID is the pin\u0026rsquo;s identifier in the hardware/datasheet. The PIN_NAME should be human-readable, and is used to generate the macros and functions. The list of tags describes what features you want enabled on that pin.\n# Pin definition format: # \u0026#39;PIN_ID\u0026#39;: (\u0026#39;PIN_NAME\u0026#39;, [\u0026#39;list\u0026#39;, \u0026#39;of\u0026#39;, \u0026#39;tags\u0026#39;]) common = { \u0026#39;A0\u0026#39;: None, # pins can be left undefined \u0026#39;A2\u0026#39;: (\u0026#39;ONE_BUTTON_PIN\u0026#39;, [\u0026#39;input\u0026#39;, \u0026#39;gpio\u0026#39;, \u0026#39;button\u0026#39;]), \u0026#39;A7\u0026#39;: (\u0026#39;RED_LED_PIN\u0026#39;, [\u0026#39;output\u0026#39;, \u0026#39;gpio\u0026#39;]), } The Pin class is at the top of pinmap.py, and functions as both a reference for the available tags, as well as a helpful shortcut for commonly used tag groups.\nclass Pin: # possible pin functions (this is just here for reference) tags = [ \u0026#39;input\u0026#39;, \u0026#39;output\u0026#39;, # initial pin direction \u0026#39;gpio\u0026#39;, # generate GPIO utility functions \u0026#39;tristate\u0026#39;, # pin direction will be changed at runtime \u0026#39;analog\u0026#39;, # generate ADC helpers \u0026#39;pullup\u0026#39;, # enable the pullup resistor \u0026#39;button\u0026#39;, # pin is used by the button debouncer \u0026#39;pps\u0026#39; # generate pin remapping helpers ] # shortcuts, common groups of functions button = [\u0026#39;input\u0026#39;, \u0026#39;gpio\u0026#39;, \u0026#39;button\u0026#39;] digital_out = [\u0026#39;output\u0026#39;, \u0026#39;gpio\u0026#39;] analog_in = [\u0026#39;input\u0026#39;, \u0026#39;analog\u0026#39;] uart_tx = [\u0026#39;output\u0026#39;, \u0026#39;pps\u0026#39;] uart_rx = [\u0026#39;input\u0026#39;, \u0026#39;pps\u0026#39;] Here\u0026rsquo;s an example pinmap with a variety of features being used:\n# format: \u0026#39;PIN_ID\u0026#39;: (\u0026#39;PIN_NAME\u0026#39;, [\u0026#39;list\u0026#39;, \u0026#39;of\u0026#39;, \u0026#39;tags\u0026#39;]) common = { # Buttons \u0026#39;A2\u0026#39;: (\u0026#39;ONE_BUTTON_PIN\u0026#39;, [\u0026#39;input\u0026#39;, \u0026#39;gpio\u0026#39;, \u0026#39;button\u0026#39;]), # specify tags \u0026#39;A3\u0026#39;: (\u0026#39;TWO_BUTTON_PIN\u0026#39;, Pin.button), # or use the premade tag groups # Individual LEDs \u0026#39;A5\u0026#39;: (\u0026#39;GREEN_LED_PIN\u0026#39;, Pin.digital_out), \u0026#39;A6\u0026#39;: (\u0026#39;YELLOW_LED_PIN\u0026#39;, Pin.digital_out), \u0026#39;A7\u0026#39;: (\u0026#39;RED_LED_PIN\u0026#39;, [\u0026#39;output\u0026#39;, \u0026#39;gpio\u0026#39;]), # Analog inputs \u0026#39;B0\u0026#39;: (\u0026#39;KNOB_ONE_PIN\u0026#39;, Pin.analog_in), \u0026#39;B1\u0026#39;: (\u0026#39;KNOB_TWO_PIN\u0026#39;, Pin.analog_in), # LED Bargraph -bitbang SPI \u0026#39;C3\u0026#39;: (\u0026#39;BARGRAPH_CLOCK_PIN\u0026#39;, Pin.digital_out), \u0026#39;C5\u0026#39;: (\u0026#39;BARGRAPH_DATA_PIN\u0026#39;, Pin.digital_out), \u0026#39;E0\u0026#39;: (\u0026#39;BARGRAPH_STROBE_PIN\u0026#39;, Pin.digital_out), # LCD - bitbang serial \u0026#39;D2\u0026#39;: (\u0026#39;LCD_TX_PIN\u0026#39;, Pin.digital_out), # RGB LED - common cathode, active high \u0026#39;D5\u0026#39;: (\u0026#39;RGB_1_LED_PIN\u0026#39;, Pin.digital_out), \u0026#39;D6\u0026#39;: (\u0026#39;RGB_2_LED_PIN\u0026#39;, Pin.digital_out), \u0026#39;D7\u0026#39;: (\u0026#39;RGB_3_LED_PIN\u0026#39;, Pin.digital_out), # USB uart \u0026#39;F6\u0026#39;: (\u0026#39;USB_TX_PIN\u0026#39;, Pin.uart_tx), \u0026#39;F7\u0026#39;: (\u0026#39;USB_RX_PIN\u0026#39;, Pin.uart_rx), } The toolchain supports development and release builds, and the following two pin dictionaries are merged with the common dictionary to create the full configuration for each mode.\nThis allows for using different hardware for dev and release, driven by a single declarative configuration\ndevelopment = { # the debug serial port is only available on development builds \u0026#39;B6\u0026#39;: (\u0026#39;DEBUG_TX_PIN\u0026#39;, Pin.uart_tx), \u0026#39;B7\u0026#39;: (\u0026#39;DEBUG_RX_PIN\u0026#39;, Pin.uart_rx), } release = { } Generated Code # Let\u0026rsquo;s go over the generated pin.h section by section, starting with the Cog block that\u0026rsquo;s doing all the work. This block is what\u0026rsquo;s actually executed by running Cog, and it imports some python libraries that are tucked away in the toolchain directory (these will be explored at a later date).\n/* [[[cog from codegen import fmt; import pins cog.outl(fmt(pins.pin_declarations())) ]]] */ // \u0026lt;generated code goes here\u0026gt; // [[[end]]] Here\u0026rsquo;s an easier to read version, if you prefer:\nExpand me from codegen import fmt import pins import cog # im # parse pinmap.py and return a string containing the C code we want raw_output = pins.pin_declarations() # format the C code using clang-format so it matches the project formatted_output = fmt(raw_output) # insert the formatted code after the Cog block cog.outl(formatted_output) GPIO Helper Functions # The next section is GPIO related utility functions. These functions use the human readable pin names, and are only created for pins that are marked as requiring specific functionality. This hides the details of which functions are on which pins from the rest of your application, and also tricks the compiler into helping detect configuration errors.\n// GPIO read functions extern bool read_ONE_BUTTON_PIN(void); extern bool read_TWO_BUTTON_PIN(void); // GPIO write functions extern void set_GREEN_LED_PIN(bool value); extern void set_YELLOW_LED_PIN(bool value); extern void set_RED_LED_PIN(bool value); extern void set_BARGRAPH_CLOCK_PIN(bool value); extern void set_BARGRAPH_DATA_PIN(bool value); extern void set_LCD_TX_PIN(bool value); extern void set_RGB_1_LED_PIN(bool value); extern void set_RGB_2_LED_PIN(bool value); extern void set_RGB_3_LED_PIN(bool value); extern void set_BARGRAPH_STROBE_PIN(bool value); // GPIO direction functions // none Button Subsytem # I use a standard button debouncing system in most of my projects, an evolution of this one described by Elliot Williams at Hackaday. A 5ms timer triggers an interrupt service routine(ISR), which scans all the buttons in the system. The system tracks the recent history of each button, allowing it to ignore button noise and detect 4 distinct input states: UP, DOWN, PRESSED (rising edge), and RELEASED (falling edge).\nThe generated array buttonFunctions is used in the ISR to scan each button in a loop. The enum of the button names allows us to have a clean API for checking button state from application code: is_btn_down(ONE), is_btn_pressed(TWO), etc.\n// Button stuff #define NUMBER_OF_BUTTONS 2 typedef bool (*button_function_t)(void); // array of pointers to button reading functions extern button_function_t buttonFunctions[NUMBER_OF_BUTTONS]; // enum of button names enum { ONE, TWO, } button_names; Pin Remapping # This family of microcontrollers allows remapping internal peripherals to different pin using a module called the Peripheral Pin Select, or PPS. Using these helpers to initialize the PPS system ensures peripherals are always routed to the correct locations.\nAlso note the presence of #ifdef DEVELOPMENT, allowing the system to switch between development and release mode by simply adding or removing the -DDEVELOPMENT compiler flag.\n// PPS Pin initialization macros #define PPS_LCD_RX_PIN PPS_INPUT(D, 3) #define PPS_USB_TX_PIN PPS_OUTPUT(F, 6) #define PPS_USB_RX_PIN PPS_INPUT(F, 7) #ifdef DEVELOPMENT #define PPS_DEBUG_RX_PIN PPS_INPUT(B, 6) #endif #ifdef DEVELOPMENT #define PPS_DEBUG_TX_PIN PPS_OUTPUT(B, 7) #endif Analog Helpers # A numeric channel ID is required to initialize an ADC read, so generated helper macros make sure the correct channels are always being used.\n// ADC Channel Select macros #define ADC_KNOB_ONE_PIN 8 #define ADC_KNOB_TWO_PIN 9 Full Generated Output # The full header, if you want to see everything together:\nExpand me /* [[[cog from codegen import fmt; import pins cog.outl(fmt(pins.pin_declarations())) ]]] */ // GPIO read functions extern bool read_ONE_BUTTON_PIN(void); extern bool read_TWO_BUTTON_PIN(void); // GPIO write functions extern void set_GREEN_LED_PIN(bool value); extern void set_YELLOW_LED_PIN(bool value); extern void set_RED_LED_PIN(bool value); extern void set_BARGRAPH_CLOCK_PIN(bool value); extern void set_BARGRAPH_DATA_PIN(bool value); extern void set_LCD_TX_PIN(bool value); extern void set_RGB_1_LED_PIN(bool value); extern void set_RGB_2_LED_PIN(bool value); extern void set_RGB_3_LED_PIN(bool value); extern void set_BARGRAPH_STROBE_PIN(bool value); // GPIO direction functions // none /* -------------------------------------------------------------------------- */ // Button stuff #define NUMBER_OF_BUTTONS 2 // array of pointers to button reading functions typedef bool (*button_function_t)(void); extern button_function_t buttonFunctions[NUMBER_OF_BUTTONS]; // enum of button names enum { ONE, TWO, } button_names; /* -------------------------------------------------------------------------- */ // PPS Pin initialization macros #define PPS_LCD_RX_PIN PPS_INPUT(D, 3) #define PPS_USB_TX_PIN PPS_OUTPUT(F, 6) #define PPS_USB_RX_PIN PPS_INPUT(F, 7) #ifdef DEVELOPMENT #define PPS_DEBUG_RX_PIN PPS_INPUT(B, 6) #endif #ifdef DEVELOPMENT #define PPS_DEBUG_TX_PIN PPS_OUTPUT(B, 7) #endif /* -------------------------------------------------------------------------- */ // ADC Channel Select macros #define ADC_KNOB_ONE_PIN 8 #define ADC_KNOB_TWO_PIN 9 // [[[end]]] And the full source file. It\u0026rsquo;s essentially just the matching implementation of the header.\nExpand me #include \u0026#34;pins.h\u0026#34; #include \u0026#34;peripherals/pic_header.h\u0026#34; /* ************************************************************************** */ /* [[[cog from codegen import fmt; import pins cog.outl(fmt(pins.pin_definitions())) ]]] */ // GPIO read functions bool read_ONE_BUTTON_PIN(void) { return PORTAbits.RA2; } bool read_TWO_BUTTON_PIN(void) { return PORTAbits.RA3; } // GPIO write functions void set_GREEN_LED_PIN(bool value) { LATAbits.LATA5 = value; } void set_YELLOW_LED_PIN(bool value) { LATAbits.LATA6 = value; } void set_RED_LED_PIN(bool value) { LATAbits.LATA7 = value; } void set_BARGRAPH_CLOCK_PIN(bool value) { LATCbits.LATC3 = value; } void set_BARGRAPH_MISO_PIN(bool value) { LATCbits.LATC4 = value; } void set_BARGRAPH_DATA_PIN(bool value) { LATCbits.LATC5 = value; } void set_LCD_TX_PIN(bool value) { LATDbits.LATD2 = value; } void set_RGB_1_LED_PIN(bool value) { LATDbits.LATD5 = value; } void set_RGB_2_LED_PIN(bool value) { LATDbits.LATD6 = value; } void set_RGB_3_LED_PIN(bool value) { LATDbits.LATD7 = value; } void set_BARGRAPH_STROBE_PIN(bool value) { LATEbits.LATE0 = value; } // GPIO direction functions // none // Button stuff // array of pointers to button reading functions button_function_t buttonFunctions[NUMBER_OF_BUTTONS] = { read_ONE_BUTTON_PIN, // read_TWO_BUTTON_PIN, // }; // [[[end]]] /* ************************************************************************** */ /* [[[cog from codegen import fmt; import pins cog.outl(fmt(pins.pins_init())) ]]] */ void pins_init(void) { // ONE_BUTTON_PIN TRISAbits.TRISA2 = 1; WPUAbits.WPUA2 = 1; // TWO_BUTTON_PIN TRISAbits.TRISA3 = 1; WPUAbits.WPUA3 = 1; // GREEN_LED_PIN TRISAbits.TRISA5 = 0; // YELLOW_LED_PIN TRISAbits.TRISA6 = 0; // RED_LED_PIN TRISAbits.TRISA7 = 0; // KNOB_ONE_PIN TRISBbits.TRISB0 = 1; ANSELBbits.ANSELB0 = 1; // KNOB_TWO_PIN TRISBbits.TRISB1 = 1; ANSELBbits.ANSELB1 = 1; // BARGRAPH_CLOCK_PIN TRISCbits.TRISC3 = 0; // BARGRAPH_MISO_PIN TRISCbits.TRISC4 = 0; // BARGRAPH_DATA_PIN TRISCbits.TRISC5 = 0; // LCD_TX_PIN TRISDbits.TRISD2 = 0; // LCD_RX_PIN TRISDbits.TRISD3 = 1; // RGB_1_LED_PIN TRISDbits.TRISD5 = 0; // RGB_2_LED_PIN TRISDbits.TRISD6 = 0; // RGB_3_LED_PIN TRISDbits.TRISD7 = 0; // BARGRAPH_STROBE_PIN TRISEbits.TRISE0 = 0; // USB_TX_PIN TRISFbits.TRISF6 = 0; // USB_RX_PIN TRISFbits.TRISF7 = 1; // DEBUG_RX_PIN #ifdef DEVELOPMENT TRISBbits.TRISB6 = 1; #endif // DEBUG_TX_PIN #ifdef DEVELOPMENT TRISBbits.TRISB7 = 0; #endif } // [[[end]]] Feature Overview, or: Why did we actually do all this? # The implementation of the code generator is unremarkable(it\u0026rsquo;s just strings in python), so we\u0026rsquo;ll skip over that for now. Far more interesting is how many different firmware features are handled:\nfunction wrappers for all register access: GPIO read GPIO write GPIO direction set automatic port initializing, making sure every pin is configured correctly Button debouncing subsystem configuration: total button count an array of function pointers to the GPIO read function for each button an enum of the button names Peripheral Pin Select (PPS) macros, used to remap features to different pins ADC Channel select macros Supports dev/release mode, using DEVELOPMENT macro Automatically regenerated when pinmap.py is changed This code generation system was directly responsible for reducing new project setup time from days (and a long tail of errors that lasted weeks) to approximately 30 minutes. I was able to get a new schematic from the hardware team, clone the most similar existing project, and have the new project compiled, running on hardware and responding to serial comms in 30 minutes, with no configuration timebombs waiting to derail me a month down the road.\n","date":"6 April 2024","externalUrl":null,"permalink":"/posts/codegen1/","section":"Posts","summary":"This article is part 1 in a series exploring code generation systems.","title":"Code Generation Case Study: Firmware Configuration","type":"posts"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/codegen/","section":"Tags","summary":"","title":"Codegen","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/embedded/","section":"Tags","summary":"","title":"Embedded","type":"tags"},{"content":" My Games # Skyknights Online: A multiplayer, competitive flight sim focused on unusual movement mechanics Isotope: ASH: A real-time card battler in the style of the Megaman Battle Network franchise. Nightwaker: Ludum Dare 49 entry. gdstrap - A curated set of engine plugins and framework files to help kickstart new projects. Tools and Plugins # Godot-Tools - I\u0026rsquo;m the lead developer of the official Godot VSCode extension. Diagraph - A dialog manager with a focus on clean workflow and unrestrained power. SelectionShortcuts - RTS-style shortcuts for 2d editing. OmniLaunch - Launch multiple instances of your game with flexible parameters. ","date":"14 February 2023","externalUrl":null,"permalink":"/gamedev/","section":"","summary":"My Games # Skyknights Online: A multiplayer, competitive flight sim focused on unusual movement mechanics Isotope: ASH: A real-time card battler in the style of the Megaman Battle Network franchise.","title":"Gamedev Stuff","type":"page"},{"content":"","date":"3 October 2022","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":" What\u0026rsquo;s the Problem? # Git branches are a fact of life if you work on projects above a certain size: there\u0026rsquo;s just no other (good) way to scale and coordinate effort from multiple programmers on one codebase. Unfortunately, mandatory doesn\u0026rsquo;t mean always mean pleasant, and I\u0026rsquo;m sure most of you have danced the Branch Shuffle enough times that you know exactly what I\u0026rsquo;m talking about.\nWhat if I told you there was a better way?\nEnter, Git Worktrees # Git worktrees allow you to have as many branches as you want checked out at the same time. Each branch can be staged, pushed, pulled, and reverted independently. Checking out a new branch is a single command and doesn\u0026rsquo;t disturb your existing branches, so there\u0026rsquo;s no need to hurridly commit your in-progress work or stash your working set with a non-descriptive name when you recieve that Priority 1++++ bug report in the middle of lunch.\nOkay, But How Does It Work? # I was deeply surprised at how easy it was to set up. Here\u0026rsquo;s my recommendation:\nmkdir MyProject \u0026amp;\u0026amp; cd MyProject git clone --bare https://url.com/path/to/MyProject .bare echo \u0026#34;gitdir: ./.bare\u0026#34;\u0026gt; .git git worktree add master git worktree add other_branch A normal clone operation will produce a folder that looks like this:\nMyProject ├── .git │ └── \u0026lt;git config folder contents\u0026gt; ├── other_file.txt └── readme.md The above procedure will produce this instead:\nMyProject ├── .bare │ └── \u0026lt;git config folder contents\u0026gt; ├── master │ ├── other_file.txt │ └── readme.md ├── other_branch │ ├── other_file.txt │ ├── new_file.txt │ └── readme.md └── .git // file, not folder As promised, each branch is checked out into it\u0026rsquo;s own folder. The .git file is necessary because without it and the extra argument to clone into ./.bare , the git config folder will just be dumped into the project root. I don\u0026rsquo;t know why this is the default operating mode of worktrees but I find it revolting.\nThe contents of .git simply tell the git executable that the actual git config folder is in ./.bare instead of the usual ./.git.\nNow what? # Personally I open the individual branch folders with VSCode and proceed as usual, but if you like workspace files you could set up a multi-root workspace to open all the branches at once or whatever you want.\nReferences # Actual documentation:\nhttps://git-scm.com/docs/git-worktree\nInspired by ThePrimagen\u0026rsquo;s YouTube video \u0026ldquo;Git\u0026rsquo;s Best and Most Unknown Feature\u0026rdquo;:\nhttps://www.youtube.com/watch?v=2uEqYw-N8uE\nRefined with ideas from Morgan Cugerone:\nhttps://morgan.cugerone.com/blog/how-to-use-git-worktree-and-in-a-clean-way/\nhttps://morgan.cugerone.com/blog/workarounds-to-git-worktree-using-bare-repository-and-cannot-fetch-remote-branches/\n","date":"3 October 2022","externalUrl":null,"permalink":"/posts/git_worktrees/","section":"Posts","summary":"What\u0026rsquo;s the Problem?","title":"Git Worktrees: The Best Kept Git Secret?","type":"posts"},{"content":"","date":"3 October 2022","externalUrl":null,"permalink":"/tags/workflow/","section":"Tags","summary":"","title":"Workflow","type":"tags"},{"content":"","date":"3 October 2022","externalUrl":null,"permalink":"/tags/godot/","section":"Tags","summary":"","title":"Godot","type":"tags"},{"content":" The setup # Creating UI layouts in GDScript is annoying, but it doesn\u0026rsquo;t have to be. Let\u0026rsquo;s explore:\nConsider the following snippet, that creates a dialog box, a vertical box layout, and a Label and ProgressBar.\nvar update_dialog = AcceptDialog.new() var vbox = VBoxContainer.new() update_dialog.add_child(vbox) var status_label = Label.new() vbox.add_child(status_label) var progress_bar = ProgressBar.new() vbox.add_child(progress_bar) This is unpleasant for a number of reasons, but the most important one is that you can\u0026rsquo;t just read it from top to bottom. Every other line diverts your attention back up the page. Nearly as bad, almost half the lines are just layout boilerplate, and don\u0026rsquo;t really say anything valuable.\nSimply put, the signal-to-noise ratio of this 7 line snippet is awful.\nCan we do better? # Obviously yes(why else would this post exist?).\nThis snippet uses a helper class to simplify the layout code, reduce boilerplate, and prevent your flow from being interrupted by removing most of the backtracking. This version can be read from top to bottom in one shot.\nvar update_dialog = AcceptDialog.new() var vbox = VBox.new(update_dialog) var status_label = vbox.add(Label.new()) var progress_bar = vbox.add(ProgressBar.new()) The explanation # This class is 7 lines long, do I really need to explain it?\nclass VBox extends VBoxContainer: func _init(parent=null): if parent: parent.add_child(self) func add(object): add_child(object) return object Okay, fine, there are some subtleties:\nThis is a class, intended to be copied into some other script. I did this to avoid polluting the global class namespace and creating changes in project.godot. The name VBox was chosen because it\u0026rsquo;s shorter and thus produces shorter code. The _init() method\u0026rsquo;s parent argument is optional, so you can still use it the normal way. (Do I have to point out that if you want the horizontal version, just change two Vs to Hs?)\n","date":"3 October 2022","externalUrl":null,"permalink":"/posts/godot_layout_helpers/","section":"Posts","summary":"The setup # Creating UI layouts in GDScript is annoying, but it doesn\u0026rsquo;t have to be.","title":"Godot Layout Helpers: Additional Exercises in Pain Reduction","type":"posts"},{"content":"The Godot editor has a number of absolutely boneheaded default settings. Here\u0026rsquo;s my recommendations for a better overall experience:\nStep one: Use an external text editor\nThis just saves space:\ninterface/inspector/horizontal_vector2_editing = true I often work on plugins, which means restarting the editor all time. This makes restarting suck less.\ninterface/scene_tabs/restore_scenes_on_load = true These prevent the internal script editor from building a collection of every single script in your project:\ntext_editor/files/open_dominant_script_on_scene_change = false text_editor/files/restore_scripts_on_load = false This makes the editor (attempt) to reload things like tool and plugin scripts when you change them in a real text editor.\ntext_editor/files/auto_reload_scripts_on_external_change = true These stop the blasted thing from opening the internal script editor when there\u0026rsquo;s an error:\ntext_editor/external/use_external_editor = true text_editor/external/exec_path = \u0026#34;\u0026#34; text_editor/external/exec_flags = \u0026#34;\u0026#34; These apply to LSP completions when using an external editor:\ntext_editor/completion/add_type_hints = true text_editor/completion/use_single_quotes = true These improve the LSP experience a little bit:\nnetwork/language_server/show_native_symbols_in_editor = true network/language_server/use_thread = true ","date":"27 September 2022","externalUrl":null,"permalink":"/posts/godot_editor_settings/","section":"Posts","summary":"The Godot editor has a number of absolutely boneheaded default settings.","title":"Godot Editor Settings and You: An Exercise in Pain Reduction","type":"posts"},{"content":"The scope tags (\u0026ldquo;name\u0026rdquo;) applied by a match are actually a space-separated list of tags. Multiple tags can be added by a single rule. This fact can be used for debugging by adding extra tags to a rule to make sure it\u0026rsquo;s being applied properly.\nmarkup.italic markup.bold A collection of resources for building VSCode extensions:\nhttps://github.com/RedCMD/TmLanguage-Syntax-Highlighter\nhttps://marketplace.visualstudio.com/items?itemName=pedro-w.tmlanguage\nhttps://www.apeth.com/nonblog/stories/textmatebundle.html\nhttps://code.visualstudio.com/api/references/vscode-api\nhttps://www.nicoespeon.com/en/2019/11/fix-vscode-extension-performance-issue/\nhttps://code.visualstudio.com/api/extension-capabilities/common-capabilities\nhttps://snyk.io/blog/vs-code-extension-building-auto-cicd-with-github-actions/\n","date":"8 September 2022","externalUrl":null,"permalink":"/posts/vscode_extensions/","section":"Posts","summary":"The scope tags (\u0026ldquo;name\u0026rdquo;) applied by a match are actually a space-separated list of tags.","title":"Adventures in VSCode Extensions","type":"posts"},{"content":"It\u0026rsquo;s always useful to have a concrete, achievable goal. When working on embedded systems, especially starting a new project, there\u0026rsquo;s so many things to do that it\u0026rsquo;s easy to get overwhelmed by decision paralysis. Imagine you just got the first prototype of a new board. You don\u0026rsquo;t have any code for it yet. Where do you start?\nBlink An LED # Hopefully your hardware has an LED tied to a microcontroller pin. Assuming it does, the first real goal of the project is to turn that LED on.\nI know it sounds trivial, but getting an LED blinking program to run on your hardware actually contains a bunch of non-trivial accomplishments:\nthe compiler has to installed correctly the toolchain has to be able to see your project files and invoke the compiler the programmer has to exist the programmer\u0026rsquo;s drivers have to be installed correctly the programmer\u0026rsquo;s control software has to be installed correctly the toolchain has to be able to invoke the programmer the board has to not explode when you plug in power the board has to provide power to the processor the board\u0026rsquo;s in circuit programming has to be designed correctly the board has to be connected to the programmer the programmer has to be connected to the computer the processor isn\u0026rsquo;t dead the processor boots the processor boots and then loads the program you uploaded to it I could go on, but hopefully you get the point. Just compiling and uploading a program requires a long list of steps to all go properly, and you should never overlook how complicated this process actually is. Ideally, you should have a toolchain that allows single click or single command compilation and programming of your hardware.\nMy open source PIC18 toolchain, EasyXC8, uses a Makefile with the commands compile and upload. Just running make upload will cause a new hex to be compiled(if necessary), and then the upload that new hex to the hardware using the specified programmer. I\u0026rsquo;m not telling you to use EasyXC8, but if uploading firmware to your board is harder than make upload, there\u0026rsquo;s something wrong with your workflow.\nTiming Is Everything # Blinking an LED proved that your environment works, and that your processor will boot and run something.\nThe next goal is making sure that the something happens when we want it to. Let\u0026rsquo;s set a modest objective: instead of just turning an LED on, let\u0026rsquo;s make that LED blink on and off once per second:\nvoid main(void) { while(1) { set_led(1); delay_ms(1000); set_led(0); delay_ms(1000); } } While it\u0026rsquo;s usually unwise to use blocking delay functions like these, writing this little delay library will be a useful exercise in getting familiar with your hardware.\nThis is a \u0026ldquo;simple\u0026rdquo; implentation of delay_ms():\nvoid delay_init(void) { timer2_clock_source(TMR2_CLK_FOSC4); timer2_postscale(TMR_POSTSCALE_10); timer2_prescale(TMR_PRESCALE_16); timer2_period_set(100); timer2_start(); } void delay_ms(uint16_t milliSeconds) { while (milliSeconds--) { timer2_interrupt_flag_clear(); while (!timer2_interrupt_flag_read()); } } This is a deceptively difficult task, because everything about it depends on your specific circumstances. This example is written for a PIC18F57Q43 running at 64MHz. This processor has 7 timers, of which I\u0026rsquo;ve chosen timer 2, an 8bit period match timer with a configurable period. I picked this timer because I can start it once and leave it running, and because it automatically resets the counter when it reaches the selected period value. These features make the delay_ms function simpler.\nThe postscale, prescale, and period were calculated starting from the main system clock value of 64MHz. In PICs, the main clock is known as FOSC. The selected clock source of TMR2_CLK_FOSC4 is the FOSC divided by 4, or 16MHz. At 16MHz, one clock tick is 62.5nS long.\nA single millisecond is equivalent to 1000 microseconds, or 1,000,000 nanoseconds. Dividing 1mS by 62.5nS gives us 16,000, the number of clock ticks in a millisecond. An 8bit timer can\u0026rsquo;t count to 16,000, so we use the prescale to divide by 16, and the postscale to divide by 10, leaving us with a nice target of 100 timer ticks. With the period set to 100, the timer will now overflow every 1 millisecond, and set its interrupt flag.\nThe while loop inside delay_ms() only does two things: clear the interrupt flag, and wait for the flag to be set again. Each time through the loop is supposed to be 1mS, and the loop executes once per millisecond we want to delay.\nYou can use an oscilloscope on the LED to test that your delays are delaying for the right amount of time. Test multiple delay values. If the delay is too long or too short, the timer configuration can be adjusted to bring it in line.\nNow, the details of this section will be irrelevant to you(unless you\u0026rsquo;re using a PIC18 running at 64MHz), but the goal is a universal one: making sure your processor is running at the right speed. If you don\u0026rsquo;t make a concious effort to prove that the clock is set properly, and have a way to PROVE that it\u0026rsquo;s set properly(by measuring your 1000mS delay with a scope, for instance), then you\u0026rsquo;re setting yourself up for failure before you\u0026rsquo;ve even started.\nSay Hello # Once your processor is running and you trust that the clocks are right, your next goal is to set up a UART for serial debugging. Native serial ports on computers are quite rare now, so you\u0026rsquo;ll probably need some kind of USB-\u0026gt;UART cable. I recommend spending the money for a cable that has a genuine FTDI converter chip, it\u0026rsquo;ll pay off in terms of reliability and driver support.\nI like to define at least two functions: uart_tx_char and uart_tx_string\nvoid uart_tx_char(char c) { // send a single byte to your UART peripheral here } void uart_tx_string(const char *string) { uint8_t i = 0; while (string[i]) { uart_tx_char(string[i++]); } } void main(void) { while(1) { uart_tx_string(\u0026#34;beep\\r\\n\u0026#34;); delay_ms(1000); } } ","date":"13 April 2021","externalUrl":null,"permalink":"/posts/first_steps/","section":"Posts","summary":"It\u0026rsquo;s always useful to have a concrete, achievable goal.","title":"First Steps For New Firmware","type":"posts"},{"content":" Hi there 👋 # I\u0026rsquo;m a software engineer specializing in embedded systems and desktop applications using Qt/PySide2, NiceGUI, and Godot.\nHere are some of my projects:\nNiceGUI Projects:\nNiceGUI Command Palette (pypi link) - Python package that provides a Sublime Text/VSCode style command palette in NiceGUI applications NiceGUI Playground (repo) - An interactive playground for quick NiceGUI prototyping + understanding the generated HTML/Vue VSCode Extensions:\nNiceGUI (repo) - Provides syntax highlighting and completions for the NiceGUI web framework godot-tools (repo) - The official extension for writing GDScript in VSCode Cog Highlighter (repo) - Provides syntax highlighting for Cog blocks in C/C++ code Cyberlang (repo) - Provides syntax highlighting for the Cyber programming language My Games:\nSkyKnights Online - A multiplayer, competitive flight sim focused on unusual movement mechanics Isotope: ASH - A modern homage to the Megaman Battle Network Series Godot plugins:\nSkein - A dialog manager with a focus on clean workflow and unrestrained power SelectionShortcuts - Editor workflow improvements you won\u0026rsquo;t know how you lived without OmniLaunch - Launch multiple instances of your game and pass custom command line arguments to each one. Consulate - An ingame dropdown console with powerful REPL debugging features Forked/Adopted Godot plugins:\nCommandPaletteRedux - A VSCode style command palette in Godot HyperLogRedux - An unreasonably effective visual diagnostics library Qt/PySide2 Projects:\nStagehand - A digital \u0026ldquo;third hand\u0026rdquo; automation tool, written in PySide2 Octoprog - A GUI wrapper for various command-line PIC programmers, written in PySide2 qtstrap (pypi link) - A Qt application bootstrapping framework Codex Engine (pypi link) - A universal translation framework for serial devices, implemented for PyQt/PySide2 MonacoQt (pypi link) - Use the Monaco text editor in your Qt applications Embedded Projects:\nEasy-XC8 - A streamlined and powerful XC8 toolchain K42-Peripheral-Libraries K42-System-Libraries K42-Project-Template JUDI - A general purpose serial protocol for interfacing between software and embedded systems. ArduinoJUDI - An Arduino-compatible implementation of the JUDI serial protocol ","date":"13 April 2021","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"Hi there 👋 # I\u0026rsquo;m a software engineer specializing in embedded systems and desktop applications using Qt/PySide2, NiceGUI, and Godot.","title":"Projects","type":"projects"},{"content":"I\u0026rsquo;m trying to optimize the following scenario: I have 2 development machines. Each one has a keypair. There are 10 remote hosts that I want to SSH into from any of the dev machines. Password authentication is disabled. I do not have physical access to all of the remote hosts. I have created a 3rd dev machine, and I need to be able to SSH into any of hosts.\nSolution #1: # get on one of the original dev machines SSH into the a remote host enable password auth go back to the new dev machine run ssh-copy-id \u0026lt;remote host\u0026gt; go back to original dev machine disable password auth repeat for every remote host This is terrible. It\u0026rsquo;s a ton of manual work, I\u0026rsquo;m intentionally creating a big security hole, and I\u0026rsquo;m probably gonna forget to resecure some of my remote machines.\nSolution #2: # make sure the new machine\u0026rsquo;s public key is uploaded to my GitHub account get on one of the original dev machines SSH into the a remote host run ssh-import-id gh:\u0026lt;username\u0026gt; repeat for every remote host Better. This is O(2n), where the 1st solution was O(10), and I can\u0026rsquo;t forget to resecure the remote hosts.\nUnfortunately this still requires going to back to one of the original machines, and it still requires two manual actions per remote host. If I forget to update one of the hosts, take my new dev machine out of the house, and then need to get into that particular host, I\u0026rsquo;m SOL.\nSolution #3: # make sure all the remote hosts are listed in an ansible inventory file make sure the new machine\u0026rsquo;s public key is uploaded to my GitHub account get on one of the original dev machines run ansible all -i hosts -a \u0026quot;ssh-import-id gh:\u0026lt;username\u0026gt;\u0026quot; Even more better. Now I\u0026rsquo;m down to a constant time solution, assuming I have access to an original dev machine.\nThis is how I\u0026rsquo;m currently managing this problem, except I put the ansible command in a shell script called keypush.sh. I expect this will scale quite well for my immediate needs.\n","date":"8 March 2021","externalUrl":null,"permalink":"/posts/key_management/","section":"Posts","summary":"I\u0026rsquo;m trying to optimize the following scenario: I have 2 development machines.","title":"Towards An O(1) Solution For Key Management","type":"posts"},{"content":"","date":"15 February 2021","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"Cool stuff from other people\nProjects # Cyber - A fast embeddable scripting language\nBlogs and Articles # Casey Muratori - ( Semantic Compression, Complexity and Granularity )\nnull program\nacko.net - (How to Fold a Julia Fractal)\nDan North - (CUPID—for joyful coding)\nJohn Carmack On Inlined Code\nServer Hardening Tools (As An Amateur)\nTools # Unit Juggler - Particularly the frequency conversion page\nUSBTreeView\nOther Stuff # SQLBolt - An excellent guided introductory course for SQL\nThe Waypoint NDA - The one and done Non-Disclosure Agreement\nThe Waypoint NDA differs from other NDAs in that you only have to read it once. Every copy of The Waypoint NDA comes with a certificate from the side proposing the NDA, guaranteeing that the terms are exactly the same as those published on this site.\n","date":"14 February 2021","externalUrl":null,"permalink":"/cool_stuff/","section":"","summary":"Cool stuff from other people","title":"Cool Stuff","type":"page"},{"content":"A friend recently gave me his old mid-2012 13\u0026quot; MacBook Pro. He has a newer MacBook Air now, and no longer needed his older Pro. He warned me that it had become exceedingly slow, but otherwise had no problems.\nFor the past several years, my primary machines have been a desktop and a Surface Pro 5. While the Surface is great, and I recommend it if you have any use at all for a pen (drawing, OneNote, whiteboarding), it\u0026rsquo;s definitely a tablet and not a laptop. It\u0026rsquo;s a tablet that tries, I have to give it that, but the kickstand is not a replacement for a hinge. Typing on a Surface in bed is an exercise in pain. Using it in the car or on the couch are barely any better.\nLong story short, it\u0026rsquo;s exciting to have a usable daily driver laptop for the first time in about five years.\nBeing a Windows guy and being spoiled by solid state drives, the first order of business was to pull the 5400rpm spinning rust HDD and replace with an SSD. My last spare SSD had been installed in some Thinkpad and had Windows already installed. On a whim, I decided to throw the drive into the MBP without reimaging it. I did not expect it to work, but 4 restarts later, Windows seemed to have properly reconfigured itself for it\u0026rsquo;s new home. The keyboard was still missing it\u0026rsquo;s function keys, trackpad multitouch was entirely missing, and wifi could see my SSID but refused to actually connect.\nThankfully, ethernet was fully operational, so I could start the search for drivers. Apple really, really wants you to install Bootcamp on your MacOS partition, and use that to download the Windows driver packages onto a flash drive. That\u0026rsquo;s great unless you\u0026rsquo;re a guy with no MacOS partition. It took two days to find a download link for the Windows files, but here it is. I did find a newer download link, but those drivers didn\u0026rsquo;t fix the wifi, so I kept going until I found 5.1.5621, which fixed the wifi and keyboard.\nThe trackpad still didn\u0026rsquo;t work until I installed this third party touchpad driver. With that, 2, 3, and 4 finger multitouch all work properly in Windows.\n","date":"13 February 2021","externalUrl":null,"permalink":"/posts/mbp/","section":"Posts","summary":"A friend recently gave me his old mid-2012 13\u0026quot; MacBook Pro.","title":"Care and Feeding of a mid-2012 MacBook Pro","type":"posts"},{"content":"this is an about page\nThis site is built using Hugo and the theme.\n","date":"11 February 2021","externalUrl":null,"permalink":"/about/","section":"","summary":"this is an about page","title":"About","type":"page"},{"content":"Useful scripts that are too small to deserve their own project page go here.\nGNU Screen backspace fix # GNU Screen does something weird with the backspace key, and this .screenrc fixes it for me.\nbindkey -d -k kb stuff \u0026#34;\\010\u0026#34; Enforce trailing newlines on entire directories # This isn\u0026rsquo;t fast, but it\u0026rsquo;s copy/pastable and should be very portable.\nfind . -type f -exec sed -i -e \u0026#39;$a\\\u0026#39; {} \\; -print Fix ssh key permissions # find .ssh/ -type f -exec chmod 600 {} \\;; find .ssh/ -type d -exec chmod 700 {} \\;; find .ssh/ -type f -name \u0026#34;*.pub\u0026#34; -exec chmod 644 {} \\; ","date":"11 February 2021","externalUrl":null,"permalink":"/scripts/","section":"","summary":"Useful scripts that are too small to deserve their own project page go here.","title":"Scripts","type":"page"},{"content":"Hello blog.\nAfter years of waffling and procrastination, I\u0026rsquo;ve finally managed to put together a blog platform that doesn\u0026rsquo;t feel like chewing on broken glass. Hugo seems to strike a good balance between flexible, powerful, simple, and extensible.\nOne less excuse to avoid putting thought to pixel.\n","date":"11 February 2021","externalUrl":null,"permalink":"/posts/hello/","section":"Posts","summary":"Hello blog.","title":"Hello","type":"post"},{"content":"","date":"11 February 2021","externalUrl":null,"permalink":"/tags/test/","section":"Tags","summary":"","title":"Test","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]